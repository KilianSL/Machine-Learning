using System;
using System.Collections.Generic;
using System.Text;

namespace PNIS.Matrix
{
    class Matrix
    {
        //Fields
        private int[] shape;
        private float[,] data;

        public int Size { get; set; }

        //constructors
        public Matrix(int m, int n) //creates a new empty matrix with specified dimensions
        {
            shape = new int[] { m, n };
            data = new float[m, n];
            Size = m * n;
        }
        public Matrix(int m, int n, float fillValue) //creates an nxm array filled with fillvalue
        {
            shape = new int[] { m, n };
            Size = m * n;
            data = new float[m, n];
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    data[i, j] = fillValue;
                }
            }
        }
        public Matrix(int m, int n, Func<float> generator)  //creates an nxm array and fills it with numbers generated by a generator function
        {
            shape = new int[] { m, n };
            Size = m * n;
            data = new float[m, n];
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    data[i, j] = generator.Invoke();
                }
            }
        }
        public Matrix(float[] vals) //creates a column vector from 1d array;
        {
            shape = new int[] { vals.Length, 1 };
            data = new float[shape[0], shape[1]];
            Size = vals.Length;
            for (int i = 0; i < vals.Length; i++)
            {
                data[i, 0] = vals[i];
            }
        }
        public Matrix(float[,] vals) //creates a matrix from a 2d array
        {
            data = vals;
            Size = vals.Length;
            shape = new int[] { vals.GetLength(0), vals.GetLength(1) };
        }

        //operators and overrrides
        public float this[int i, int j]
        {
            get { return data[i, j]; }
            set { data[i, j] = value; }
        }
        public static Matrix operator +(Matrix A, Matrix B)
        {
                A.Add(B);
                return A;
        }

        public static Matrix operator +(Matrix A, float b)
        {
            A.Add(b);
            return A;
        }
        public static Matrix operator +(float b, Matrix A)
        {
            A.Add(b);
            return A;
        }
        
        public static Matrix operator *(Matrix A, Matrix B)
        {
            B.Transform(A);
            return B;
        }
        public static Matrix operator *(Matrix A, float b)
        {
            A.Transform(b);
            return A;
        }
        public static Matrix operator *(float b, Matrix A)
        {
            A.Transform(b);
            return A;
        }
        public override string ToString()
        {
            string str = "";
            for (int i = 0; i < shape[0]; i++)
            {
                for (int j = 0; j < shape[1]; j++)
                {
                    str += data[i, j] + " ";
                }
                str += Environment.NewLine;
            }
            return str;
        }

        //methods
        public int GetLength(int dimension)
        {
            return shape[dimension];
        }

        public void Add(Matrix m)
        {
            if (shape[0] == m.GetLength(0) && shape[1] == m.GetLength(1))
            {
                for (int i = 0; i < shape[0]; i++)
                {
                    for (int j = 0; j < shape[1]; j++)
                    {
                        data[i, j] += m.data[i, j];
                    }
                }
            }
            else
            {
                throw new Exception("Wrong dimensions for addition");
            }
        }
        public void Add(float a)
        {
            for (int i = 0; i < shape[0]; i++)
            {
                for (int j = 0; j < shape[1]; j++)
                {
                    data[i, j] += a;
                }
            }
        }
        public void Transform(Matrix m)
        {
            if (this.GetLength(0) == m.GetLength(1))
            {
                float[,] result = new float[m.GetLength(0), this.GetLength(1)];
                shape = new int[] { result.GetLength(0), result.GetLength(1) };
                Size = result.Length;
                for (int i = 0; i < result.GetLength(0); i++)
                {
                    for (int j = 0; j < result.GetLength(1); j++)
                    {
                        float v = 0;
                        for (int k = 0; k < this.GetLength(0); k++)
                        {
                            v += m[i, k] + this[i, k];
                        }
                    }
                }
            }
            else
            {
                throw new Exception("Wrong dimensions for transformation");
            }
        }
        public void Transform(float a)
        {
            for (int i = 0; i < shape[0]; i++)
            {
                for (int j = 0; j < shape[1]; j++)
                {
                    data[i, j] *= a;
                }
            }
        }

        public void Reshape(int m, int n) //copies the elements of the matrix to another matrix of the specified dimension. Can lose values / repeat values to fit new shape
        {
            if (m*n < shape[0] * shape[1]) //checks reshape is valid
            {
                Console.WriteLine("Specified dimensions smaller than target matrix - some values will be lost");
            }
            else if (m * n > shape[0] * shape[1])
            {
                Console.WriteLine("Specified dimensions larger than target matrix - some values will be copied");
            }


            var unravelledData = this.ToFlatArray();  //creates a 1d array holding all the data in the matrix
            
            

            int count = 0;
            var newData = new float[m, n]; //reshaped array storing the data for the matrix
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    newData[i, j] = unravelledData[count % unravelledData.Length];
                    count += 1;
                }
            }

            data = newData;
            shape = new int[] { m, n };
            Size = m * n;
        }

        public float[,] ToArray()  //returns a 2D array of the matrix
        {
            return data;
        }
        public float[] ToFlatArray()  //returns all the values in the matrix as a 1-d array
        {
            var flatArray = new float[shape[0] * shape[1]];  //creates a 1d array holding all the data in the matrix
            int count = 0;
            foreach (var value in data)
            {
                flatArray[count] = value;
                count += 1;
            }
            return flatArray;
        }
    }
}
